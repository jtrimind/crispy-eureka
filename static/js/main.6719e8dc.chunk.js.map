{"version":3,"sources":["Map.js","Parmarcy.js","info.js","Search.js","Gps.js","App.js","serviceWorker.js","index.js"],"names":["Map","latlng","storeList","onPositionChanged","useState","kakao","setKakao","useEffect","script","document","createElement","async","src","head","appendChild","onload","window","map","setMap","maps","load","container","getElementById","options","center","LatLng","level","event","addListener","getCenter","getLat","getLng","panTo","forEach","store","position","CustomOverlay","content","id","className","Parmacy","onStoreListUpdated","setStoreList","a","Axios","get","params","WGS84_LAT","WGS84_LON","list","console","log","status","items","data","response","body","item","item_latlng","element","latitude","longitude","getStoreList","Info","open","setOpen","Button","onClick","Dialog","DialogTitle","DialogContentText","Search","SearchOutlined","InputBase","Gps","navigator","geolocation","getCurrentPosition","coords","error","code","message","GpsFixed","App","setLatlng","lat","lng","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6719e8dc.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nfunction Map({latlng, storeList, onPositionChanged}) {\r\n  const [kakao, setKakao] = useState(null);\r\n  useEffect(() => {\r\n    const script = document.createElement(\"script\");\r\n    script.async = true;\r\n    script.src =\r\n      \"https://dapi.kakao.com/v2/maps/sdk.js?appkey=f5185fb09b4ee9df57bd6b168585bb8c&autoload=false\";\r\n    document.head.appendChild(script);\r\n    script.onload = () => {\r\n      setKakao(window.kakao);\r\n    };\r\n  }, []);\r\n\r\n  const [map, setMap] = useState(null);\r\n  useEffect(() => {\r\n    if (kakao) {\r\n      kakao.maps.load(() => {\r\n        let container = document.getElementById(\"map\");\r\n        let options = {\r\n          center: new kakao.maps.LatLng(latlng[0], latlng[1]),\r\n          level: 7\r\n        };\r\n\r\n        setMap(new kakao.maps.Map(container, options));\r\n      });\r\n    }\r\n  }, [kakao]);\r\n\r\n  useEffect(() => {\r\n    if (map) {\r\n      kakao.maps.event.addListener(map, 'dragend', () => {\r\n        const center = map.getCenter();\r\n        onPositionChanged(center.getLat(), center.getLng());\r\n      });\r\n    }\r\n  }, [map])\r\n\r\n  useEffect(() => {\r\n    if (map) {\r\n      map.panTo(new kakao.maps.LatLng(latlng[0], latlng[1]));\r\n    }\r\n  }, [latlng]);\r\n\r\n  useEffect(() => {\r\n    if (map && storeList) {\r\n      var content = '<div class =\"label\"><span class=\"left\"></span><span class=\"center\">카카오!</span><span class=\"right\"></span></div>';\r\n      storeList.forEach(store => {\r\n        var position = new kakao.maps.LatLng(store[0], store[1]);\r\n        var customOverlay = new kakao.maps.CustomOverlay({\r\n          content: content,\r\n          position: position\r\n        });\r\n        customOverlay.setMap(map);\r\n      });\r\n    }\r\n  }, [storeList])\r\n  return (\r\n    <div id='map' className='Map'/>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import Axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nfunction Parmacy ({latlng, onStoreListUpdated}) {\r\n\r\n  const [storeList, setStoreList] = useState([]);\r\n  useEffect(() => {\r\n    const getStoreList = async () => {\r\n      var url = 'https://congenial-spoon.web.app/pharmacy';\r\n      // var url = 'http://localhost:5000/pharmacy';\r\n      const list = await Axios.get(url, {\r\n        params: {\r\n          WGS84_LAT: latlng[0],\r\n          WGS84_LON: latlng[1]\r\n        }\r\n      });\r\n      console.log(list);\r\n      if (list.status === 200) {\r\n        var items = list.data.response.body.items;\r\n        console.log(items);\r\n        if (items) {\r\n          const item = items.item;\r\n          const item_latlng = item.map(element => {\r\n            return [element.latitude, element.longitude];\r\n          });\r\n          console.log(item_latlng);\r\n          setStoreList(item_latlng);\r\n        }\r\n      }\r\n    }\r\n    getStoreList();\r\n  }, [latlng]);\r\n\r\n  useEffect(() => {\r\n    onStoreListUpdated(storeList);\r\n  }, [storeList]);\r\n\r\n  return (<div></div>);\r\n}\r\n\r\nexport default Parmacy;\r\n","import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport { Dialog, DialogContentText, DialogTitle } from '@material-ui/core';\r\n\r\nfunction Info() {\r\n  const [ open, setOpen ] = useState(false);\r\n  return (\r\n    <>\r\n      <Button onClick={() => { setOpen(true) }}>\r\n        <InfoIcon />\r\n      </Button>\r\n      <Dialog open={open}>\r\n        <DialogTitle>당장약국은?</DialogTitle>\r\n        <DialogContentText>\r\n          지금 당장 찾아갈 수 있는 약국을 바로 확인할 수 있게 개발된 서비스 입니다.\r\n          국립중앙의료원에서 공개하는 전국 약국 정보를 토대로 제공되며, 본 서비스에서 안내되는 약국의 실제 영업여부는 각 약국의 사정에 따라 변동 될 수 있습니다.\r\n          문의사항 :\r\n        </DialogContentText>\r\n        <Button onClick={() => { setOpen(false) }}>닫기</Button>\r\n      </Dialog>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Info;\r\n","import React from 'react';\r\nimport { SearchOutlined } from '../node_modules/@material-ui/icons';\r\nimport { InputBase } from '../node_modules/@material-ui/core';\r\n\r\nfunction Search() {\r\n  return (\r\n    <div className='Search'>\r\n        <SearchOutlined />\r\n        <InputBase />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport { Button } from \"@material-ui/core\";\r\nimport { GpsFixed } from \"@material-ui/icons\";\r\n\r\nfunction Gps({ onPositionChanged }) {\r\n  return (\r\n    <div className='Gps'>\r\n      <Button onClick={() => {\r\n        if (\"geolocation\" in navigator) {\r\n          navigator.geolocation.getCurrentPosition((position) => {\r\n            onPositionChanged(position.coords.latitude, position.coords.longitude);\r\n          }, (error) => {\r\n            console.error(\"Error Code = \" + error.code + \" - \" + error.message);\r\n          });\r\n        } else {\r\n          console.log(\"Not Available\");\r\n        }\r\n      }}>\r\n        <GpsFixed />\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Gps;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Map from './Map';\r\nimport Parmacy from './Parmarcy';\r\nimport Info from './info';\r\nimport Search from './Search';\r\nimport Gps from './Gps';\r\n\r\nfunction App() {\r\n  const [latlng, setLatlng] = useState([37, 127]);\r\n  const onPositionChanged = (lat, lng) => {\r\n    console.log(\"position changed: \" + lat + ' ' + lng);\r\n    setLatlng([lat, lng]);\r\n  };\r\n\r\n  const [storeList, setStoreList] = useState([]);\r\n  const onStoreListUpdated = (list) => {\r\n    console.log(list);\r\n    setStoreList(list);\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"Top\">\r\n        당장약국\r\n        <Info />\r\n        <Search />\r\n      </div>\r\n      <div className=\"MapContent\">\r\n        <Gps onPositionChanged={onPositionChanged} />\r\n        <Map latlng={latlng} onPositionChanged={onPositionChanged} storeList={storeList} />\r\n      </div>\r\n      <Parmacy latlng={latlng} onStoreListUpdated={onStoreListUpdated} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}