{"version":3,"sources":["Map.js","Parmarcy.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","state","map","onLocationButton","bind","script","document","createElement","async","src","head","appendChild","onload","console","log","kakao","maps","load","container","getElementById","options","center","LatLng","level","setState","window","event","addListener","latlng","getCenter","onPositionChanged","getLat","getLng","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","panTo","error","code","message","className","id","onClick","this","React","Component","Parmacy","getList","a","Axios","get","params","WGS84_LAT","WGS84_LON","list","status","item","data","response","body","items","dutyName","componentDidMount","prevProps","App","lat","lng","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.90b330d5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Map.css';\r\n/*global kakao*/\r\n\r\nclass Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      map: null,\r\n    };\r\n    this.onLocationButton = this.onLocationButton.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const script = document.createElement(\"script\");\r\n    script.async = true;\r\n    script.src =\r\n      \"https://dapi.kakao.com/v2/maps/sdk.js?appkey=f5185fb09b4ee9df57bd6b168585bb8c&autoload=false\";\r\n    document.head.appendChild(script);\r\n\r\n    script.onload = () => {\r\n      console.log(\"script onload\");\r\n      kakao.maps.load(() => {\r\n        console.log(\"kakao maps load\");\r\n        let container = document.getElementById(\"map\");\r\n        let options = {\r\n          center: new kakao.maps.LatLng(37.506502, 127.053617),\r\n          level: 7\r\n        };\r\n\r\n        this.setState({ map: new window.kakao.maps.Map(container, options) });\r\n        kakao.maps.event.addListener(this.state.map, 'dragend', () => {\r\n          const latlng = this.state.map.getCenter();\r\n          this.props.onPositionChanged(latlng.getLat(), latlng.getLng());\r\n        });\r\n\r\n      });\r\n    };\r\n  }\r\n\r\n  onLocationButton() {\r\n    console.log(\"btn click\");\r\n    if (\"geolocation\" in navigator) {\r\n      console.log(\"Available\");\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        const latlng = new kakao.maps.LatLng(position.coords.latitude, position.coords.longitude);\r\n        console.log(\"lat:\" + latlng.getLat() + \" lng: \" + latlng.getLng());\r\n        this.state.map.panTo(latlng);\r\n        this.props.onPositionChanged(latlng.getLat(), latlng.getLng());\r\n      }, (error) => {\r\n        console.error(\"Error Code = \" + error.code + \" - \" + error.message);\r\n      });\r\n    } else {\r\n      console.log(\"Not Available\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className='Map' id='map'>\r\n        </div>\r\n        <button onClick={this.onLocationButton}>Current Position</button>\r\n      </div>);\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import Axios from 'axios';\r\nimport React from 'react';\r\n\r\nclass Parmacy extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  getList = async () => {\r\n    var url = 'https://congenial-spoon.web.app/pharmacy';\r\n    // var url = 'http://localhost:5000/pharmacy';\r\n    const list = await Axios.get(url, {\r\n      params: {\r\n        WGS84_LAT: this.props.latlng[0],\r\n        WGS84_LON: this.props.latlng[1]\r\n      }\r\n    });\r\n    console.log(list);\r\n    console.log(list.status);\r\n    if (list.status === 200) {\r\n      var item = list.data.response.body.items.item;\r\n      console.log(item);\r\n      this.setState({list: item[0].dutyName});\r\n    } else {\r\n      this.setState({list: \"\"});\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.latlng !== this.props.latlng) {\r\n      console.log(\"update\");\r\n      this.getList();\r\n    }\r\n  }\r\n  componentDidMount = () => {\r\n  }\r\n  render() {\r\n    return (<div>{this.state.list ? this.state.list : \"Loading\"}</div>);\r\n  }\r\n}\r\n\r\nexport default Parmacy;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Map from './Map';\r\nimport Parmacy from './Parmarcy';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            latlng: [0.0, 0.0],\r\n        };\r\n        this.onPositionChanged = this.onPositionChanged.bind(this);\r\n    }\r\n\r\n    onPositionChanged(lat, lng) {\r\n        this.setState({latlng: [lat, lng]});\r\n        console.log(\"position changed\", lat, lng);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (\"geolocation\" in navigator) {\r\n            console.log(\"Available\");\r\n            navigator.geolocation.getCurrentPosition(function (position) {\r\n                console.log(\"Latitude is :\", position.coords.latitude);\r\n                console.log(\"Longitude is :\", position.coords.longitude);\r\n            }, function (error) {\r\n                console.error(\"Error Code = \" + error.code + \" - \" + error.message);\r\n            });\r\n        } else {\r\n            console.log(\"Not Available\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <Map onPositionChanged={this.onPositionChanged}></Map>\r\n                <Parmacy latlng={this.state.latlng} ></Parmacy>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}