{"version":3,"sources":["Map.js","Parmarcy.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","state","map","script","document","createElement","async","src","head","appendChild","onload","console","log","kakao","maps","load","container","getElementById","options","center","LatLng","level","setState","window","event","addListener","latlng","getCenter","onPositionChanged","getLat","getLng","className","id","React","Component","Parmacy","getList","a","Axios","get","params","WGS84_LAT","WGS84_LON","list","status","item","data","response","body","items","dutyName","componentDidMount","prevProps","this","App","bind","lat","lng","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","code","message","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.023a0ab6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Map.css';\r\n/*global kakao*/\r\n\r\nclass Map extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            map: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const script = document.createElement(\"script\");\r\n        script.async = true;\r\n        script.src =\r\n            \"https://dapi.kakao.com/v2/maps/sdk.js?appkey=f5185fb09b4ee9df57bd6b168585bb8c&autoload=false\";\r\n        document.head.appendChild(script);\r\n\r\n        script.onload = () => {\r\n            console.log(\"script onload\");\r\n            kakao.maps.load(() => {\r\n                console.log(\"kakao maps load\");\r\n                let container = document.getElementById(\"map\");\r\n                let options = {\r\n                    center: new kakao.maps.LatLng(37.506502, 127.053617),\r\n                    level: 7\r\n                };\r\n\r\n                this.setState({map: new window.kakao.maps.Map(container, options)});\r\n                kakao.maps.event.addListener(this.state.map, 'dragend', () => {\r\n                    var latlng = this.state.map.getCenter();\r\n                    this.props.onPositionChanged(latlng.getLat(), latlng.getLng());\r\n                });\r\n\r\n            });\r\n        };\r\n    }\r\n    render() {\r\n        return (<div className='Map' id='map'></div>);\r\n    }\r\n}\r\n\r\nexport default Map;\r\n","import Axios from 'axios';\r\nimport React from 'react';\r\n\r\nclass Parmacy extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  getList = async () => {\r\n    var url = 'https://congenial-spoon.web.app/pharmacy';\r\n    // var url = 'http://localhost:5000/pharmacy';\r\n    const list = await Axios.get(url, {\r\n      params: {\r\n        WGS84_LAT: this.props.latlng[0],\r\n        WGS84_LON: this.props.latlng[1]\r\n      }\r\n    });\r\n    console.log(list);\r\n    console.log(list.status);\r\n    if (list.status === 200) {\r\n      var item = list.data.response.body.items.item;\r\n      console.log(item);\r\n      this.setState({list: item[0].dutyName});\r\n    } else {\r\n      this.setState({list: \"\"});\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.latlng !== this.props.latlng) {\r\n      console.log(\"update\");\r\n      this.getList();\r\n    }\r\n  }\r\n  componentDidMount = () => {\r\n  }\r\n  render() {\r\n    return (<div>{this.state.list ? this.state.list : \"Loading\"}</div>);\r\n  }\r\n}\r\n\r\nexport default Parmacy;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Map from './Map';\r\nimport Parmacy from './Parmarcy';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            latlng: [0.0, 0.0],\r\n        };\r\n        this.onPositionChanged = this.onPositionChanged.bind(this);\r\n    }\r\n\r\n    onPositionChanged(lat, lng) {\r\n        this.setState({latlng: [lat, lng]});\r\n        console.log(\"position changed\", lat, lng);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (\"geolocation\" in navigator) {\r\n            console.log(\"Available\");\r\n            navigator.geolocation.getCurrentPosition(function (position) {\r\n                console.log(\"Latitude is :\", position.coords.latitude);\r\n                console.log(\"Longitude is :\", position.coords.longitude);\r\n            }, function (error) {\r\n                console.error(\"Error Code = \" + error.code + \" - \" + error.message);\r\n            });\r\n        } else {\r\n            console.log(\"Not Available\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <Map onPositionChanged={this.onPositionChanged}></Map>\r\n                <Parmacy latlng={this.state.latlng} ></Parmacy>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}